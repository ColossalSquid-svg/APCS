import java.util.*;

public class Main {
    
    public static double getStudentWithHighestScore(StudentCourseScore[] scores, Course[] core, Student[] name,  int cID)
    {
      double max = scores[0].getScore();
      for (int i = 1; i < scores.length; i++) // traverse StudentCourseScore array
      {
        if(scores[i].getCourseID() == cID) //check if courseID in StudentCourseScore array
        {                                                                 //  = courseID in course array
          if(scores[i].getScore() > max) // checks if scores[1 and onward] > scores[0], then sets max to that value
          {
            max = scores[i].getScore(); 
          }
        }
      }
      System.out.print("max is " + max);
      return max;
    }
    
    
    public static void main(String[] args) {
      // list of students
      Student simon = new  Student("Simon", 87);
      Student jade = new Student("Jade", 88);
      Student grace = new Student("Grace", 89);
      
      Student[] students = {simon, jade,  grace};
      
      // list of courses
      Course apcsa = new Course(1, "APCSA", "Coding", true);
      Course apwh = new Course(2, "APWH", "World History", true);
      Course spanish = new Course(3, "Spanish", "Language", false);
      
      Course[] courses = {apcsa, apwh, spanish};
      // list of scores
      StudentCourseScore simon_apcsa_score = new StudentCourseScore(87, 1, 0.45);
      StudentCourseScore jade_apcsa_score = new StudentCourseScore(88, 1, 0.69);
      StudentCourseScore jade_spanish_score = new StudentCourseScore(88, 3, 0.69);
      StudentCourseScore grace_apcsa_score = new StudentCourseScore(89, 1, 0.70);
      StudentCourseScore grace_apwh_score = new StudentCourseScore(89, 2, 0.70);
      
      StudentCourseScore[] scss = {simon_apcsa_score, jade_apcsa_score, grace_apcsa_score};
      
      getStudentWithHighestScore(scss, courses, students, 1);
      
    
public class Student
{
  private String name;//"Simon Li"
  private int studentID;

  public Student(String name, int studentID)
  {
    this.name = name;
    this.studentID = studentID;
  }
  
  public String getName()
  {
    return name;
  }
  
  
  public int getStudentID()
  {
    return studentID;
  }
  public String toString()
  {
    return name + " " + studentID;
  }
}

public class Course
{
  private int courseID;
  private String courseName;
  private String courseDescript;
  private boolean ap;
  
  public Course(int courseID, String courseName, String courseDescript, boolean ap)
  {
    this.courseID = courseID;
    this.courseName = courseName;
    this.courseDescript = courseDescript;
    this.ap = ap;
  }
  
  public int getCourseID()
  {
    return courseID;
  }
  
  public String getCourseName()
  {
    return courseName;
  }
  
  public String getCourseDes()
  {
    return courseDescript;
  }
  
  public boolean getAp()
  {
    return ap;
  }
}

public class StudentCourseScore
{
  private int studentID;
  private int courseID;
  private double score; // percentage of correnctness
  
  public StudentCourseScore(int studentID, int courseID, double score)
  {
    this.studentID = studentID;
    this.courseID = courseID;
    this.score = score;
  }

  public int getStudentID()
  {
    return studentID;
  }
  
  public int getCourseID()
  {
    return courseID;
  }
  
  public double getScore()
  {
    return score;
  }

    // insertion sort without recursion
void sort(int a[])
{
int n = a.length;
        for (int i = 1; i < n; ++i) 
        {
            int k = a[i];
            int j = i - 1;

            // Move elements of arr[0..i-1], that are
            // greater than key, to one position ahead
            // of their current position
            while (j >= 0 && a[j] > k) 
            {
                a[j + 1] = a[j];
                j = j - 1;
            }
        }
}
          
            a[j + 1] = k;
  public int getCourseID(int studentId)
  {
    return courseID;
  }  
}
